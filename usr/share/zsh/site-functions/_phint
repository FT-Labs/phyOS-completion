#compdef phint

local state line

function getcmd() {
    echo $@ | sed -e "s/\\\/\\\\\\\/g;s/\\\:/:/g"
}

# sudo ls -lanR /boot
# sudo ls -lanR /sys/firmware
# sudo efibootmgr -v
# sudo gdisk -l _dev_

# DEV
# sudo dmidecode
# sudo lshw
# sudo lshw -c "CLASS"
# sudo lspci -k
# sudo lspci -kv

function _block() {
    _blocks=$(cat <<-'EOF'
sudo blockdev --report:[Block] - Print report for block devices
sudo ls -lanR /sys/block:[Block] - Get virtual block paths
sudo udevmadm info _dev_:[Block] - Get udev information about _dev_ path
sudo blkid _dev_ -D  --match-tag UUID -o value:[Filesystem] - Get _dev_ UUID value
debugfs -R "stat _dest_" _dev_ | grep -o "Flags\:.*":[Filesystem] - Get stats of _dest_ from _dev_ (Can get options even if it is mounted from any mount command)
sudo losetup -a:[Loop] - Print loop device status
sudo dmsetup ls --tree --table devname -o blkdevname,compact:[Mapper] - Print dm deps in each line
sudo dmsetup ls --tree --table devname -o blkdevname,compact | grep $(mount | awk '/on \/ / {n=split($1,a,"/"); print a[n]}') | awk '{print $(NF-1)}' | tr -d "<>":[Mapper] - Get devname of encrypted root partition
EOF
)
    local -a _blockargs=("${(@f)$(getcmd $_blocks)}")
    _describe -t block 'Block - nvme - mapper related' _blockargs
    _evalarg=
    return 0
}

#

function _str.h() {
    _str_h=$(cat <<'EOF'
| sed 's/^[[\:blank\:]]*//;s/[[\:blank\:]]*$//':[Pipe] - Remove trailing spaces from string
| sed '/^_match_/s/^/_prefix_/':[Pipe] - Insert _prefix_ before _match_
| grep -Po '_delim_._word_*?_delim_\b(?<=_endchar_)':[Pipe] - Split str by _delim_ with _word_ regex with look ahead _endchar_
_var_="(${$(echo -n _str_ | tr -t -C '!' '[\\0*]' | xxd -c 1 -d -a | awk -F\: '/21/ {print $1}')})":[Array] - Split _str_ to numerical array
_arr_="${(@f)$_str_}":[Array] - Split _str_ by newline to array _arr_ (IFS seperated)
_arr_="${(s._delim_.)_str_}":[Array] - Split _str_ by _delim_
EOF
)
    local -a _strargs=("${(@f)$(getcmd $_str_h)}")
    _describe -t strings 'String Manipulation' _strargs
    _evalarg=
    return 0
}

function _kernel() {
    _kern=$(cat <<'EOF'
grep --text -m 1 "video mode" -A2 _kern_ | tail -1 | awk '{print $1}':[Kernel] - Get kernel version from kernel binary (Useful when file command is not available, like busybox)
mount -n --bind -o ro _cmdline_ /proc/cmdline:[Kernel] - Hijack cmdline on the run!!
ls -D /proc/[0-9]*/{status,oom_score_adj} | sort --field-separator=/ --numeric-sort -k3 | xargs sed -e '/^[0-9]/s/^/OomAdjScore\:/ ' 2>/dev/null | grep -E -w 'OomAdjScore|Name|Pid':[Memory] - Get OOM score from running processes to stdout (sorted)
sudo slabtop -o:[Memory] - Show slab table once and exit
swapon --bytes --show:[Memory] - Show swap usage in bytes
lsmem -a -o RANGE,SIZE,STATE,REMOVABLE,ZONES,NODE,BLOCK:[Memory] - Show detailed memory table
EOF
)
    local -a _kernargs=("${(@f)$(getcmd $_kern)}")
    _describe -t kernel 'Kernel - debug' _kernargs
    _evalarg=
    return 0
}

function _pacman() {
    _pac=$(cat <<'EOF'
        sudo pacman -R --nodeps _pkg_:[Pacman] - Remove _pkg_ and skip dependency checks
        sudo pacman -Rnc _pkg_:[Pacman] - Remove _pkg_ with all dependencies
        sudo pacman -Rnd _pkg_:[Pacman] - Force remove _pkg_ without removing dependencies
        pacman -Qlq _pkg_ | while read f; do [[ -d $f ]] && mkdir -p "./$f" || cp $f "./$f"; done:[Pacman] - Extract pacman package (get all files, compatible with deb binaries) to current directory
        sudo pacman -Qii _pkg_:[Pacman] - Get information about package
EOF
)
    local -a _pacargs=("${(@f)$(getcmd $_pac)}")
    _describe -t pacmanpac 'Pacman tricks' _pacargs
    _evalarg=
    return 0
}

function _sysd() {
    _sys_d=$(cat <<'EOF'
sudo journalctl -b -1  -p "emerg".."crit":[Boot] - Get emergency to critical logs from boot
sudo journalctl _SYSTEMD_UNIT=_unit_.service:[Unit] - Get logs generated by _unit_
sudo journalctl -u _unit_:[Unit] - Get all logs related to _unit_
sudo systemctl list-units:[Unit] - List units
sudo systemctl list-units --all:[Unit] - List all units
sudo systemctl list-units --failed:[Unit] - List all failed units
sudo systemctl list-dependencies:[System] - Get all dependencies of systemd units (tree view)
sudo systemctl list-jobs:[System] - Get active jobs
sudo systemctl list-timers:[System] - Get all systemd unit timers
sudo systemctl list-unit-files:[System] - Get all unit files
sudo systemd-analyze:[System] - Get startup time starting from boot
sudo systemd-analyze blame:[System] - Get startup time for each unit starting from boot
EOF
)
    local -a _sysdargs=("${(@f)$(getcmd $_sys_d)}")
    _describe -t sysd 'Systemd - journal commands' _sysdargs
    _evalarg=
    return 0
}

function _net() {
    _net_s=$(cat <<'EOF'
ip addr show:[ip] - Display all network information
ip addr show dev _dev_:[ip] - Show network information for only _dev_
ip link:[ip] - Display information for network interfaces
ip -s link:[ip] - Show interface statistics
ip maddr:[ip] - Display multicast information for all devices
ip maddr show dev _dev_:[ip] - Display multicast information for device _dev_
ip neigh:[ip] - Display neighbour objects
ip neigh show dev _dev_:[ip] Show the ARP cache for device _dev_
ip link dev _dev_:[ip] - Display information for only _dev_
ip route:[Route] - List all route entries in kernel
ip route add default via _gateway_ dev _dev_:[Route] - Add default route via the local _gateway_ that can be reached on device _dev_
ip route add _ipaddr/sm_ via _gateway_:[Route] - Add a route to _ipaddr/sm_ via _gateway_
sudo ip addr add _ipaddr/sm_ dev _dev_:[ip] - Add _ipaddr/sm_ with submask to _dev_
sudo ip addr del _ipaddr/sm_ dev _dev_:[ip] - Delete _ipaddr/sm_ with submask to _dev_
sudo ip link set _dev_ up:[Status] - Set _dev_ up
sudo ip link set _dev_ down:[Status] - Set _dev_ down
sudo ip link set _dev_ promisc on:[Status] - Enable promiscius mode for _dev_
sudo ip link set _dev_ mtu _size_:[Packet] - Set largest frame or packet = _size_



EOF
)

    local -a _netargs=("${(@f)$(getcmd $_net_s)}")
    _describe -t neta 'Network commands' _netargs
    _evalarg=
    return 0
}

_arguments -C \
    "1: :->cmds" \
    "*: :->args"

case "$state" in
    cmds)
        _values "phint command" \
            "block[Block dev scripts - mapper - storage]" \
            "driverinfo[Driver scripts]" \
            "kernel[Kernel related commands]" \
            "network[Network related commands]" \
            "pacman[Useful pacman commands]" \
            "systemd[Systemd - journal commands]" \
            "str.h[String manipulation]" && return 0
        ;;
    args)
        case "$line[1]" in
            block)
                _block
                ;;
            pacman)
                _pacman
                ;;
            driverinfo)
                _driverinfo
                ;;
            str.h)
                _str.h
                ;;
            kernel)
                _kernel
                ;;
            network)
                _net
                ;;
            systemd)
                _sysd
                ;;
        esac
esac

# vim: set et ts=4 sw=4 ft=zsh:
